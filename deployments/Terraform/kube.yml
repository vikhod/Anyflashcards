---
  - hosts: kube
    become: true
    collections: 
      - ansible_collections.community.general
    tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'lsb-release', 'wget' ]

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name={{ item }} state=latest
      loop: [ 'docker-ce', 'docker-ce-cli', 'containerd.io' ]
    
    - name: Add docker group
      group:
        name: docker
        state: present

    - name: Add user ubuntu to the docker group
      user:
        name: ubuntu
        append: yes
        groups: docker
    
    - name: Reset ssh connection to allow user changes to affect ansible user
      meta:
        reset_connection

    - name: Verify docker
      command: docker run hello-world
      register: ver_doc

    - name: Print verifying result
      debug:
        msg: " {{ ver_doc.stdout_lines[1] }} "

    - name: Get K3s installation script
      get_url:
        url: https://get.k3s.io
        dest: /etc/k3s_inst_script.sh
        mode: '755'

    - name: Install K3s with docker
      command: sh /etc/k3s_inst_script.sh --docker --write-kubeconfig-mode 644

    - name: Create directory .kube
      file:
        path: ~{{ ansible_ssh_user }}/.kube
        state: directory
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: '750'

    - name: Copy config file to user home directory
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ~{{ ansible_ssh_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: "u=rw,g=,o="

    - name: Replace https://localhost:6443 by https://kube-ip:6443
      command: >-
        k3s kubectl config set-cluster default
          --server=https://{{ kube_ip }}:6443
          --kubeconfig ~{{ ansible_ssh_user }}/.kube/config
      changed_when: true

    - name: Store kube config file localy
      become: false
      fetch:
        src: ~/.kube/config
        dest: .kube/config

    - name: Create kubectl symlink
      file:
        src: /usr/local/bin/k3s
        dest: /usr/local/bin/kubectl
        state: link

    - name: Create crictl symlink
      file:
        src: /usr/local/bin/k3s
        dest: /usr/local/bin/crictl
        state: link

    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes

    - name: Enable IPv6 forwarding
      sysctl:
        name: net.ipv6.conf.all.forwarding
        value: "1"
        state: present
        reload: yes

    - name: Create a new ext4 primary partition on /dev/vdc
      community.general.parted:
        device: /dev/vdc
        number: 1
        state: present
    
    - name: Make file system on /dev/vdc1
      community.general.filesystem:
        fstype: ext4
        dev: /dev/vdc1
        state: present

    - name: Create directory for mounting volume
      file:
        path: ~{{ ansible_ssh_user }}/anyflashcards_volume
        state: directory
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: '755'

    - name: Mount /dev/vdc1 to /anyflashcards_volume
      mount:
        path: ~{{ ansible_ssh_user }}/anyflashcards_volume
        src: /dev/vdc1
        fstype: ext4
        state: mounted

    - name: Get and install SOPS
      shell: |
        SOPS_URL=$(curl -s "https://api.github.com/repos/mozilla/sops/releases/latest" | grep -o "http.*sops_.*_amd64\.deb")
        wget $SOPS_URL -O ~/sops.deb
        sudo apt install ~/sops.deb
      changed_when: true

    - name: Clone branch from Github
      ansible.builtin.git:
        repo: https://github.com/vikhod/Anyflashcards.git
        dest: ~{{ ansible_ssh_user }}/Anyflashcards
        version: main #could be version branch if it is production env
      tags: 
        - now
    
    - name: Copy .asc and .sops files
      copy: 
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
        mode: '600'
      with_items:
        - { src: '../../af.asc', dest: '~{{ ansible_ssh_user }}/Anyflashcards' }
        - { src: '../../.sops.yml', dest: '~{{ ansible_ssh_user }}/Anyflashcards' }
      tags: 
        - now

    - name: Import gpg key and decrypt secrets
      shell: |
        gpg --import ~{{ ansible_ssh_user }}/Anyflashcards/af.asc
        sops -d --config ~{{ ansible_ssh_user }}/Anyflashcards/.sops.yml ~{{ ansible_ssh_user }}/Anyflashcards/deployments/k8s/mongo-secret.enc.yml > /home/ubuntu/Anyflashcards/deployments/k8s/mongo-secret.yml
        sops -d --config ~{{ ansible_ssh_user }}/Anyflashcards/.sops.yml ~{{ ansible_ssh_user }}/Anyflashcards/deployments/k8s/express-secret.enc.yml > /home/ubuntu/Anyflashcards/deployments/k8s/express-secret.yml
        sops -d --config ~{{ ansible_ssh_user }}/Anyflashcards/.sops.yml ~{{ ansible_ssh_user }}/Anyflashcards/deployments/k8s/anyflashcardsbot-secret.enc.yml > /home/ubuntu/Anyflashcards/deployments/k8s/anyflashcardsbot-secret.yml
      tags: 
        - now

        


# GPG:
# Export pgp key, with next command:
# AF_KEY=$(gpg --armor --export-secret-keys DF1DE04F1BF45A11FBF2D700EACB59B213844133

# SOPS:
# Decrypt all secrets localy, with next command:
#   sops -e --encrypted-regex '^(data)$' k8s/mongo-secret.yml > k8s/mongo-secret.yml.enc

# TODO Move all credentials into eyaml or Ansible vault


